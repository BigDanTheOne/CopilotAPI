syntax = "proto3";

package yandex.cloud.mdb.mysql.v1alpha;

import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "yandex/api/operation.proto";
import "yandex/cloud/operation/operation.proto";
import "yandex/cloud/validation.proto";
import "yandex/cloud/mdb/mysql/v1alpha/database.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/mdb/mysql/v1alpha;mysql";

// A set of methods for managing MySQL databases.
service DatabaseService {
  // Returns the specified MySQL database.
  rpc Get (GetDatabaseRequest) returns (Database) {
    option (google.api.http) = { get: "/managed-mysql/v1alpha/clusters/{cluster_id}/databases/{database_name}" };
  }

  // Retrieves a list of MySQL databases.
  rpc List (ListDatabasesRequest) returns (ListDatabasesResponse) {
    option (google.api.http) = { get: "/managed-mysql/v1alpha/clusters/{cluster_id}/databases" };
  }

  // Creates a new MySQL database.
  rpc Create (CreateDatabaseRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/managed-mysql/v1alpha/clusters/{cluster_id}/databases" body: "*" };
    option (yandex.api.operation) = {
      metadata: "CreateDatabaseMetadata"
      response: "Database"
    };
  }

  // Deletes the specified MySQL database.
  rpc Delete (DeleteDatabaseRequest) returns (operation.Operation) {
    option (google.api.http) = { delete: "/managed-mysql/v1alpha/clusters/{cluster_id}/databases/{database_name}" };
    option (yandex.api.operation) = {
      metadata: "DeleteDatabaseMetadata"
      response: "google.protobuf.Empty"
    };
  }
}

message GetDatabaseRequest {
  // Required. ID of the MySQL cluster.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // Required.
  string database_name = 2 [(required) = true, (length) = "<=63", (pattern) = "[a-zA-Z0-9_-]*"];
}

message ListDatabasesRequest {
  // Required. ID of the MySQL cluster.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // The maximum number of results per page that should be returned. If the number of available
  // results is larger than `page_size`, the service returns a `next_page_token` that can be used
  // to get the next page of results in subsequent ListDatabases requests.
  // Acceptable values are 0 to 1000, inclusive. Default value: 100.
  int64 page_size = 2 [(value) = "0-1000"];

  // Page token. Set `page_token` to the `next_page_token` returned by a previous ListDatabases
  // request to get the next page of results.
  string page_token = 3 [(length) = "<=100"];
}

message ListDatabasesResponse {
  // Requested list of MySQL clusters.
  repeated Database databases = 1;

  // This token allows you to get the next page of results for ListDatabases requests,
  // if the number of results is larger than `page_size` specified in the request.
  // To get the next page, specify the value of `next_page_token` as a value for
  // the `page_token` parameter in the next ListDatabases request. Subsequent ListDatabases
  // requests will have their own `next_page_token` to continue paging through the results.
  string next_page_token = 2;
}

message CreateDatabaseRequest {
  // Required. ID of the MySQL cluster.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // Required.
  DatabaseSpec database_spec = 2 [(required) = true];
}

message CreateDatabaseMetadata {
  // Required. ID of the MySQL cluster.
  string cluster_id = 1;

  // Required. Name of the creating database.
  string database_name = 2;
}

message DeleteDatabaseRequest {
  // Required. ID of the MySQL cluster.
  string cluster_id = 1 [(required) = true, (length) = "<=50"];

  // Required. Name of the database to delete.
  string database_name = 2 [(required) = true, (length) = "<=63", (pattern) = "[a-zA-Z0-9_-]*"];
}

message DeleteDatabaseMetadata {
  // Required. ID of the MySQL cluster.
  string cluster_id = 1;

  // Required. Name of the deleting database.
  string database_name = 2;
}
