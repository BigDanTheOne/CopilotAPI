syntax = "proto3";

package yandex.cloud.mdb.clickhouse.v1;

import "google/protobuf/wrappers.proto";
import "yandex/cloud/validation.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/mdb/clickhouse/v1;clickhouse";
option java_package = "yandex.cloud.api.mdb.clickhouse.v1";

// A ClickHouse User resource. For more information, see 
// the [Developer's guide](/docs/managed-clickhouse/concepts).
message User {
  // Name of the ClickHouse user.
  string name = 1;

  // ID of the ClickHouse cluster the user belongs to.
  string cluster_id = 2;

  // Set of permissions granted to the user.
  repeated Permission permissions = 3;

  UserSettings settings = 4;

  // Set of quotas assigned to the user.
  repeated UserQuota quotas = 5;
}

message Permission {
  reserved 2;

  // Name of the database that the permission grants access to.
  string database_name = 1;
}

message UserSpec {
  // Name of the ClickHouse user.
  string name = 1 [(required) = true, (length) = "<=63", (pattern) = "[a-zA-Z0-9_]*"];

  // Password of the ClickHouse user.
  string password = 2 [(required) = true, (length) = "8-128"];

  // Set of permissions to grant to the user.
  repeated Permission permissions = 3;

  UserSettings settings = 4;

  // Set of quotas assigned to the user.
  repeated UserQuota quotas = 5;
}

// ClickHouse user settings. Supported settings are a limited subset of all settings
// described in [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/settings/).
message UserSettings {
  enum OverflowMode {
    OVERFLOW_MODE_UNSPECIFIED = 0;

    OVERFLOW_MODE_THROW = 1;

    OVERFLOW_MODE_BREAK = 2;
  }

  enum GroupByOverflowMode {
    GROUP_BY_OVERFLOW_MODE_UNSPECIFIED = 0;

    GROUP_BY_OVERFLOW_MODE_THROW = 1;

    GROUP_BY_OVERFLOW_MODE_BREAK = 2;

    GROUP_BY_OVERFLOW_MODE_ANY = 3;
  }

  enum DistributedProductMode {
    DISTRIBUTED_PRODUCT_MODE_UNSPECIFIED = 0;

    // Default value. Prohibits using these types of subqueries (returns the "Double-distributed in/JOIN subqueries is denied" exception).
    DISTRIBUTED_PRODUCT_MODE_DENY = 1;

    // Replaces the database and table in the subquery with local ones for the destination server (shard), leaving the normal IN/JOIN.
    DISTRIBUTED_PRODUCT_MODE_LOCAL = 2;

    // Replaces the IN/JOIN query with GLOBAL IN/GLOBAL JOIN.
    DISTRIBUTED_PRODUCT_MODE_GLOBAL = 3;

    // Allows the use of these types of subqueries.
    DISTRIBUTED_PRODUCT_MODE_ALLOW = 4;
  }

  enum QuotaMode {
    QUOTA_MODE_UNSPECIFIED = 0;
    QUOTA_MODE_DEFAULT = 1;
    QUOTA_MODE_KEYED = 2;
    QUOTA_MODE_KEYED_BY_IP = 3;
  }

  // Restricts permissions for non-DDL queries. Possible values: 0 (default) — no restrictions,
  // 1 — only read data queries are allowed, 2 — read data and change settings queries are allowed.
  google.protobuf.Int64Value readonly = 1 [(value) = "0-2"];

  // Whether DDL queries are allowed. Default value: false.
  google.protobuf.BoolValue allow_ddl = 2;

  // For INSERT queries in the replicated table, wait writing for the specified number of replicas and linearize
  // the addition of the data.
  google.protobuf.Int64Value insert_quorum = 3 [(value) = ">=0"];

  // Connection timeout in milliseconds.
  google.protobuf.Int64Value connect_timeout = 39 [(value) = ">0"];

  // Receive timeout in milliseconds.
  google.protobuf.Int64Value receive_timeout = 40 [(value) = ">0"];

  // Send timeout in milliseconds.
  google.protobuf.Int64Value send_timeout = 41 [(value) = ">0"];

  // Quorum write timeout in milliseconds. Default value: 60000.
  google.protobuf.Int64Value insert_quorum_timeout = 4 [(value) = ">=1000"];

  // For SELECT queries from the replicated table, throw an exception if the replica does not have a chunk written
  // with the quorum; do not read the parts that have not yet been written with the quorum.
  google.protobuf.BoolValue select_sequential_consistency = 5;

  // Max replica delay in milliseconds. If a replica lags more than the set value, this replica is not used.
  // Default value: 300000.
  google.protobuf.Int64Value max_replica_delay_for_distributed_queries = 6 [(value) = ">=1000"];

  // Determine the behavior when all replicas for the queried table are stale. If enabled, the query will be
  // performed anyway. Otherwise, the error will be thrown.
  google.protobuf.BoolValue fallback_to_stale_replicas_for_distributed_queries = 7;

  // Wait mode for ALTER queries on replicated tables.
  // Possible values: 0 - do not wait, 1 - wait for execution only of itself, 2 - wait for everyone.
  google.protobuf.Int64Value replication_alter_partitions_sync = 42 [(value) = "0-2"];

  // Determine the behavior of distributed subqueries. Possible values: DISTRIBUTED_PRODUCT_MODE_DENY,
  // DISTRIBUTED_PRODUCT_MODE_LOCAL, DISTRIBUTED_PRODUCT_MODE_GLOBAL, DISTRIBUTED_PRODUCT_MODE_ALLOW.
  DistributedProductMode distributed_product_mode = 43;

  // Whether the memory-saving mode of distributed aggregation is enabled.
  google.protobuf.BoolValue distributed_aggregation_memory_efficient = 72;

  // Timeout for DDL queries, in milliseconds.
  google.protobuf.Int64Value distributed_ddl_task_timeout = 73;

  // Whether unavailable shards can be skipped.
  google.protobuf.BoolValue skip_unavailable_shards = 81;

  // Whether query compilation is enabled.
  google.protobuf.BoolValue compile = 44;

  // The number of structurally identical queries before they are compiled.
  google.protobuf.Int64Value min_count_to_compile = 45 [(value) = ">=0"];

  // Whether expression compilation is enabled.
  google.protobuf.BoolValue compile_expressions = 46;

  // The number of identical expressions before they are compiled.
  google.protobuf.Int64Value min_count_to_compile_expression = 47 [(value) = ">=0"];

  // The maximum block size for reading.
  google.protobuf.Int64Value max_block_size = 9 [(value) = ">0"];

  // Squash blocks passed to INSERT query to specified size in rows, if blocks are not big enough. If set to 0,
  // blocks will never be squashed.
  google.protobuf.Int64Value min_insert_block_size_rows = 48 [(value) = ">=0"];

  // Squash blocks passed to INSERT query to specified size in bytes, if blocks are not big enough. If set to 0,
  // blocks will never be squashed.
  google.protobuf.Int64Value min_insert_block_size_bytes = 49 [(value) = ">=0"];

  // The maximum block size for insertion.
  google.protobuf.Int64Value max_insert_block_size = 10 [(value) = ">0"];

  // The minimum number of bytes for reading the data with O_DIRECT option during SELECT queries execution.
  google.protobuf.Int64Value min_bytes_to_use_direct_io = 50 [(value) = ">=0"];

  // Whether to use the cache of uncompressed blocks.
  google.protobuf.BoolValue use_uncompressed_cache = 51;

  // The maximum request size in rows to use the cache of uncompressed data. The cache is not used for requests larger
  // than the specified value.
  google.protobuf.Int64Value merge_tree_max_rows_to_use_cache = 52 [(value) = ">0"];

  // The maximum request size in bytes to use the cache of uncompressed data. The cache is not used for requests larger
  // than the specified value.
  google.protobuf.Int64Value merge_tree_max_bytes_to_use_cache = 53 [(value) = ">0"];

  // The minimum number of rows to be read from a file to enable concurrent read.
  google.protobuf.Int64Value merge_tree_min_rows_for_concurrent_read = 54 [(value) = ">0"];

  // The minimum number of bytes to be read from a file to enable concurrent read.
  google.protobuf.Int64Value merge_tree_min_bytes_for_concurrent_read = 55 [(value) = ">0"];

  google.protobuf.Int64Value max_bytes_before_external_group_by = 74;

  google.protobuf.Int64Value max_bytes_before_external_sort = 75;

  google.protobuf.Int64Value group_by_two_level_threshold = 76;

  google.protobuf.Int64Value group_by_two_level_threshold_bytes = 77;

  // Priority of the query.
  google.protobuf.Int64Value priority = 56 [(value) = ">=0"];

  // The maximum number of threads to execute the request.
  google.protobuf.Int64Value max_threads = 8 [(value) = ">0"];

  // The maximum memory usage for processing of a single query.
  google.protobuf.Int64Value max_memory_usage = 11 [(value) = ">=0"];

  // The maximum memory usage for processing all concurrently running queries for the user.
  google.protobuf.Int64Value max_memory_usage_for_user = 12 [(value) = ">=0"];

  // The maximum speed of data exchange over the network in bytes per second for a query.
  google.protobuf.Int64Value max_network_bandwidth = 57;

  // The maximum speed of data exchange over the network in bytes per second for all concurrently running user queries.
  google.protobuf.Int64Value max_network_bandwidth_for_user = 58;

  // Disables query execution if the index can’t be used by date.
  google.protobuf.BoolValue force_index_by_date = 59;

  // Disables query execution if indexing by the primary key is not possible.
  google.protobuf.BoolValue force_primary_key = 60;

  // The maximum number of rows that can be read from a table when running a query.
  google.protobuf.Int64Value max_rows_to_read = 13 [(value) = ">=0"];

  // The maximum number of bytes (uncompressed data) that can be read from a table when running a query.
  google.protobuf.Int64Value max_bytes_to_read = 14 [(value) = ">=0"];

  // Determine the behavior on exceeding max_rows_to_read or max_bytes_to_read limit.
  // Possible values: OVERFLOW_MODE_THROW, OVERFLOW_MODE_BREAK.
  OverflowMode read_overflow_mode = 15;

  // The maximum number of unique keys received from aggregation.
  google.protobuf.Int64Value max_rows_to_group_by = 16 [(value) = ">=0"];

  // Determine the behavior on exceeding max_rows_to_group_by limit. Possible values: GROUP_BY_OVERFLOW_MODE_THROW,
  // GROUP_BY_OVERFLOW_MODE_BREAK, GROUP_BY_OVERFLOW_MODE_ANY.
  GroupByOverflowMode group_by_overflow_mode = 17;

  // The maximum number of rows before sorting.
  google.protobuf.Int64Value max_rows_to_sort = 18 [(value) = ">=0"];

  // The maximum number of bytes before sorting.
  google.protobuf.Int64Value max_bytes_to_sort = 19 [(value) = ">=0"];

  // Determine the behavior on exceeding max_rows_to_sort or max_bytes_to_sort limit.
  // Possible values: OVERFLOW_MODE_THROW, OVERFLOW_MODE_BREAK.
  OverflowMode sort_overflow_mode = 20;

  // Limit on the number of rows in the result.
  google.protobuf.Int64Value max_result_rows = 21 [(value) = ">=0"];

  // Limit on the number of bytes in the result.
  google.protobuf.Int64Value max_result_bytes = 22 [(value) = ">=0"];

  // Determine the behavior on exceeding max_result_rows or max_result_bytes limit.
  // Possible values: OVERFLOW_MODE_THROW, OVERFLOW_MODE_BREAK.
  OverflowMode result_overflow_mode = 23;

  // The maximum number of different rows when using DISTINCT.
  google.protobuf.Int64Value max_rows_in_distinct = 24 [(value) = ">=0"];

  // The maximum number of bytes used by a hash table when using DISTINCT.
  google.protobuf.Int64Value max_bytes_in_distinct = 25 [(value) = ">=0"];

  // Determine the behavior on exceeding max_rows_in_distinct or max_bytes_in_distinct limit.
  // Possible values: OVERFLOW_MODE_THROW, OVERFLOW_MODE_BREAK.
  OverflowMode distinct_overflow_mode = 26;

  // The maximum number of rows that can be passed to a remote server or saved in a temporary table when using GLOBAL IN.
  google.protobuf.Int64Value max_rows_to_transfer = 27 [(value) = ">=0"];

  // The maximum number of bytes (uncompressed data) that can be passed to a remote server or saved in a temporary
  // table when using GLOBAL IN.
  google.protobuf.Int64Value max_bytes_to_transfer = 28 [(value) = ">=0"];

  // Determine the behavior on exceeding max_rows_to_transfer or max_bytes_to_transfer limit.
  // Possible values: OVERFLOW_MODE_THROW, OVERFLOW_MODE_BREAK.
  OverflowMode transfer_overflow_mode = 29;

  // The maximum query execution time in milliseconds.
  google.protobuf.Int64Value max_execution_time = 30 [(value) = ">=0"];

  // Determine the behavior on exceeding max_execution_time limit.
  // Possible values: OVERFLOW_MODE_THROW, OVERFLOW_MODE_BREAK.
  OverflowMode timeout_overflow_mode = 31;

  // The maximum number of columns that can be read from a table in a single query.
  google.protobuf.Int64Value max_columns_to_read = 32 [(value) = ">=0"];

  // The maximum number of temporary columns that must be kept in RAM at the same time when running a query, including constant columns.
  google.protobuf.Int64Value max_temporary_columns = 33 [(value) = ">=0"];

  // The maximum number of temporary columns that must be kept in RAM at the same time when running a query, excluding constant columns.
  google.protobuf.Int64Value max_temporary_non_const_columns = 34 [(value) = ">=0"];

  // The maximum part of a query that can be taken to RAM for parsing with the SQL parser, in bytes. Default value: 262144.
  google.protobuf.Int64Value max_query_size = 35 [(value) = ">0"];

  // The maximum depth of query syntax tree. Default value: 1000.
  google.protobuf.Int64Value max_ast_depth = 36 [(value) = ">0"];

  // The maximum size of query syntax tree in number of nodes. Default value: 50000.
  google.protobuf.Int64Value max_ast_elements = 37 [(value) = ">0"];

  // The maximum size of query syntax tree in number of nodes after expansion of aliases and the asterisk. Default value: 500000.
  google.protobuf.Int64Value max_expanded_ast_elements = 38 [(value) = ">0"];

  // Enables or disables the full SQL parser if the fast stream parser cannot parse the data.
  google.protobuf.BoolValue input_format_values_interpret_expressions = 61;

  // When performing INSERT queries, replace omitted input column values with default values of the respective columns.
  google.protobuf.BoolValue input_format_defaults_for_omitted_fields = 62;

  // Whether quoting of 64-bit integers is enabled in JSON output format.
  google.protobuf.BoolValue output_format_json_quote_64bit_integers = 63;

  // Whether output of special floating-point values (+nan, -nan, +inf and -inf) is enabled in JSON output format.
  google.protobuf.BoolValue output_format_json_quote_denormals = 64;

  // Whether LowCardinality type is enabled in Native format.
  google.protobuf.BoolValue low_cardinality_allow_in_native_format = 78;

  // Return empty result when aggregating without keys on empty set.
  google.protobuf.BoolValue empty_result_for_aggregation_by_empty_set = 79;

  // HTTP connection timeout, in milliseconds.
  google.protobuf.Int64Value http_connection_timeout = 65;

  // HTTP receive timeout, in milliseconds.
  google.protobuf.Int64Value http_receive_timeout = 66;

  // HTTP send timeout, in milliseconds.
  google.protobuf.Int64Value http_send_timeout = 67;

  // Whether data compression is enabled in HTTP responses.
  google.protobuf.BoolValue enable_http_compression = 68;

  // Whether progress notifications using X-ClickHouse-Progress headers are enabled. Default value: false.
  google.protobuf.BoolValue send_progress_in_http_headers = 69;

  // Minimum interval between progress notifications, in milliseconds. Default value: 100.
  google.protobuf.Int64Value http_headers_progress_interval = 70;

  // Whether CORS header in HTTP responses is enabled. Default value: false.
  google.protobuf.BoolValue add_http_cors_header = 71;

  // Quota accounting mode. Possible values: QUOTA_MODE_DEFAULT, QUOTA_MODE_KEYED and QUOTA_MODE_KEYED_BY_IP.
  QuotaMode quota_mode = 80;
}

// ClickHouse quota representation. Each quota associated with an user and limits it resource usage for an interval.
// See in-depth description [ClickHouse documentation](https://clickhouse.yandex/docs/en/operations/quotas/).
message UserQuota {
  // Duration of interval for quota in milliseconds.
  // Minimal value is 1 second.
  google.protobuf.Int64Value interval_duration = 1 [(value) = ">=1000"];

  // The total number of queries.
  // 0 - unlimited.
  google.protobuf.Int64Value queries = 2 [(value) = ">=0"];

  // The number of queries that threw exception.
  // 0 - unlimited.
  google.protobuf.Int64Value errors = 3 [(value) = ">=0"];

  // The total number of rows given as the result..
  // 0 - unlimited.
  google.protobuf.Int64Value result_rows = 4 [(value) = ">=0"];

  // The total number of source rows read from tables for running the query, on all remote servers.
  // 0 - unlimited.
  google.protobuf.Int64Value read_rows = 5 [(value) = ">=0"];

  // The total query execution time, in milliseconds (wall time).
  // 0 - unlimited.
  google.protobuf.Int64Value execution_time = 6 [(value) = ">=0"];
}
