syntax = "proto3";

package yandex.cloud.apploadbalancer.v1;

import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";

import "yandex/cloud/api/operation.proto";
import "yandex/cloud/operation/operation.proto";
import "yandex/cloud/apploadbalancer/v1/target_group.proto";
import "yandex/cloud/validation.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/apploadbalancer/v1;apploadbalancer";
option java_package = "yandex.cloud.api.apploadbalancer.v1";

service TargetGroupService {
  rpc Get(GetTargetGroupRequest) returns (TargetGroup) {
    option (google.api.http) = { get: "/apploadbalancer/v1/targetGroups/{target_group_id}" };
  }
  rpc List(ListTargetGroupsRequest) returns (ListTargetGroupsResponse) {
    option (google.api.http) = { get: "/apploadbalancer/v1/targetGroups" };
  }

  rpc Create(CreateTargetGroupRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/apploadbalancer/v1/targetGroups" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "CreateTargetGroupMetadata"
      response: "TargetGroup"
    };
  }
  rpc Update(UpdateTargetGroupRequest) returns (operation.Operation) {
    option (google.api.http) = { patch: "/apploadbalancer/v1/targetGroups/{target_group_id}" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "UpdateTargetGroupMetadata"
      response: "TargetGroup"
    };
  }
  rpc Delete(DeleteTargetGroupRequest) returns (operation.Operation) {
    option (google.api.http) = { delete: "/apploadbalancer/v1/targetGroups/{target_group_id}" };
    option (yandex.cloud.api.operation) = {
      metadata: "DeleteTargetGroupMetadata"
      response: "google.protobuf.Empty"
    };
  }

  rpc AddTargets(AddTargetsRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/apploadbalancer/v1/targetGroups/{target_group_id}:addTargets" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "AddTargetsMetadata"
      response: "TargetGroup"
    };
  }

  rpc RemoveTargets(RemoveTargetsRequest) returns (operation.Operation) {
    option (google.api.http) = { post: "/apploadbalancer/v1/targetGroups/{target_group_id}:removeTargets" body: "*" };
    option (yandex.cloud.api.operation) = {
      metadata: "RemoveTargetsMetadata"
      response: "TargetGroup"
    };
  }

  // Lists operations for the specified target group.
  rpc ListOperations (ListTargetGroupOperationsRequest) returns (ListTargetGroupOperationsResponse) {
    option (google.api.http) = { get: "/apploadbalancer/v1/targetGroups/{target_group_id}/operations" };
  }
}

message GetTargetGroupRequest {
  string target_group_id = 1 [(required) = true];
}

message ListTargetGroupsRequest {
  string folder_id = 1 [(required) = true];

  int64 page_size = 2 [(value) = "0-1000"];
  string page_token = 3 [(length) = "<=100"];
  string filter = 4 [(length) = "<=1000"];
}

message ListTargetGroupsResponse {
  repeated TargetGroup target_groups = 1;
  string next_page_token = 2;
}

message DeleteTargetGroupRequest {
  string target_group_id = 1 [(required) = true];
}

message DeleteTargetGroupMetadata {
  string target_group_id = 1;
}

message UpdateTargetGroupRequest {
  string target_group_id = 1 [(required) = true];
  google.protobuf.FieldMask update_mask = 2;

  string name = 3 [(pattern) = "|[a-z]([-a-z0-9]{0,61}[a-z0-9])?"];
  string description = 4 [(length) = "<=256"];
  map<string, string> labels = 5 [(yandex.cloud.size) = "<=64", (length) = "<=63", (pattern) = "[-_./\\@0-9a-z]*", (map_key).length = "1-63", (map_key).pattern = "[a-z][-_./\\@0-9a-z]*"];

  repeated Target targets = 6;
}

message UpdateTargetGroupMetadata {
  string target_group_id = 1;
}

message CreateTargetGroupRequest {
  string folder_id = 1 [(required) = true];
  string name = 2 [(pattern) = "|[a-z]([-a-z0-9]{0,61}[a-z0-9])?"];
  string description = 3 [(length) = "<=256"];
  map<string, string> labels = 4 [(yandex.cloud.size) = "<=64", (length) = "<=63", (pattern) = "[-_./\\@0-9a-z]*", (map_key).length = "1-63", (map_key).pattern = "[a-z][-_./\\@0-9a-z]*"];

  repeated Target targets = 5;
}

message CreateTargetGroupMetadata {
  string target_group_id = 1;
}

message AddTargetsRequest {
  string target_group_id = 1 [(required) = true];
  repeated Target targets = 2 [(size) = ">0"];
}

message AddTargetsMetadata {
  string target_group_id = 1;
}

message RemoveTargetsRequest {
  string target_group_id = 1 [(required) = true];
  repeated Target targets = 2 [(size) = ">0"];
}

message RemoveTargetsMetadata {
  string target_group_id = 1;
}

message ListTargetGroupOperationsRequest {
  // ID of the target group to get operations for.
  //
  // To get the target group ID, use a [TargetGroupService.List] request.
  string target_group_id = 1 [(required) = true, (length) = "<=50"];

  // The maximum number of results per page that should be returned. If the number of available
  // results is larger than [page_size], the service returns a [ListTargetGroupOperationsResponse.next_page_token]
  // that can be used to get the next page of results in subsequent list requests.
  // Default value: 100.
  int64 page_size = 2 [(value) = "<=1000"];

  // Page token. To get the next page of results, set [page_token] to the
  // [ListTargetGroupOperationsResponse.next_page_token] returned by a previous list request.
  string page_token = 3 [(length) = "<=100"];
}

message ListTargetGroupOperationsResponse {
  // List of operations for the specified target group.
  repeated operation.Operation operations = 1;

  // This token allows you to get the next page of results for list requests. If the number of results
  // is larger than [ListTargetGroupOperationsRequest.page_size], use the [next_page_token] as the value
  // for the [ListTargetGroupOperationsRequest.page_token] query parameter in the next list request.
  // Each subsequent list request will have its own [next_page_token] to continue paging through the results.
  string next_page_token = 2;
}
