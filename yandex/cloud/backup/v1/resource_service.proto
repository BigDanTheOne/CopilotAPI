syntax = "proto3";

package yandex.cloud.backup.v1;

import "google/api/annotations.proto";

import "yandex/cloud/api/operation.proto";
import "yandex/cloud/backup/v1/resource.proto";
import "yandex/cloud/operation/operation.proto";
import "yandex/cloud/validation.proto";

option go_package = "github.com/yandex-cloud/go-genproto/yandex/cloud/backup/v1;backup";
option java_package = "yandex.cloud.api.backup.v1";

service ResourceService {
    // List resources: [Compute Cloud instances](/docs/backup/concepts/vm-connection#os).
    rpc List(ListResourcesRequest) returns (ListResourcesResponse) {
        option (google.api.http) = { get: "/backup/v1/resources" };
    };

    // Get specific Compute Cloud instance.
    rpc Get(GetResourceRequest) returns (GetResourceResponse) {
        option (google.api.http) = { get: "/backup/v1/resources/{compute_instance_id}" };
    };

    // Delete specific Compute Cloud instance from Cloud Backup. It does not delete
    // instance from Cloud Compute service.
    rpc Delete(DeleteResourceRequest) returns (operation.Operation) {
        option (google.api.http) = { delete: "/backup/v1/resources/{compute_instance_id}" };
        option (yandex.cloud.api.operation) = {
          metadata: "DeleteResourceMetadata"
          response: "google.protobuf.Empty"
        };
    };

    // List tasks of resources.
    rpc ListTasks(ListTasksRequest) returns (ListTasksResponse) {
        option (google.api.http) = { get: "/backup/v1/resources/{compute_instance_id}/tasks" };
    };

    // ListDirectory returns all subdirectories found in requested directory identified
    // by the id.
    rpc ListDirectory(ListDirectoryRequest) returns (ListDirectoryResponse);

    // CreateDirectory creates new directory by requested path.
    rpc CreateDirectory(CreateDirectoryRequest) returns (operation.Operation) {
        option (yandex.cloud.api.operation) = {
          metadata: "CreateDirectoryMetadata"
          response: "google.protobuf.Empty"
        };
    };
}

message ListResourcesRequest {
    string folder_id = 1 [ (required) = true, (length) = "<=50" ];
    int64 page_size = 2 [ (value) = "<=1000" ];
    string page_token = 3 [ (length) = "<=100" ];
}

message ListResourcesResponse {
    repeated Resource resources = 1;
    string next_page_token = 2;
}

message GetResourceRequest {
    string compute_instance_id = 1 [ (required) = true, (length) = "<=50" ];
}

message GetResourceResponse {
    Resource resource = 1;
}

message DeleteResourceRequest {
    string compute_instance_id = 1 [ (required) = true, (length) = "<=50" ];
    string resource_id = 2 [ (required) = true ];
}

message DeleteResourceMetadata {
    // Compute Cloud Instance ID of the Backup.
    string compute_instance_id = 1;
}

message ListTasksRequest {
    string compute_instance_id = 1 [ (required) = true, (length) = "<=50" ];
    int64 page_size = 2 [ (value) = "<=1000" ];
    string page_token = 3 [ (length) = "<=100" ];
}

message ListTasksResponse {
    repeated Task tasks = 1;
    string next_page_token = 2;
}

message ListDirectoryRequest {
    string folder_id = 1 [ (required) = true, (length) = "<=50" ];
    string compute_instance_id = 2 [ (required) = true ];
    string path = 3 [ (required) = false ];
}

message ListDirectoryResponse {
    message FilesystemItem {
        enum Type {
            TYPE_UNSPECIFIED = 0;
            VOLUME = 1;
            DIRECTORY = 2;
            FILE = 3;
        }

        string name = 1;
        // Might be Volume, Directory of File.
        Type type = 2;
        // Might be Directory or File.
        Type file_type = 3;
        int64 size = 4;
    }

    repeated FilesystemItem items = 1;
}

message CreateDirectoryRequest {
    string folder_id = 1 [ (required) = true, (length) = "<=50" ];
    string compute_instance_id = 2 [ (required) = true ];
    string path = 3 [ (required) = true ];
}

message CreateDirectoryMetadata {
    string compute_instance_id = 1;
    string path = 2;
}
